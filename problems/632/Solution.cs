namespace Problem_632;

public class Solution
{
    public static void Execute()
    {
        // IList<IList<int>> nums = [[95387, 95790, 97307, 98168, 99868, 99995, 99995, 100000], [-69454, -17042, 8172, 50983, 63432, 72854, 73012, 80848, 83723, 85916, 91759, 99779, 99913, 99944, 99994, 99999, 99999], [65641, 95910, 97995, 98196, 98969, 99008, 99591, 99732, 99735, 99896, 99952, 99989, 99999, 100000], [57459, 95855, 97360, 98320, 99147, 99865, 99955, 99989, 99997, 99998, 100000], [-81589, -3474, 84141, 92981, 95255, 99192, 99962, 99970, 99994, 99998, 99999, 100000], [-23262, 92924, 95548, 96462, 99338, 99553, 99555, 99569, 99644, 99903, 99909, 99999, 99999, 100000], [-58466, 24432, 87898, 92795, 95701, 98143, 98163, 99182, 99351, 99746, 99811, 99943, 99955, 99978, 99997, 100000], [-97588, 7867, 10356, 20288, 67836, 69868, 73038, 77753, 81937, 88474, 89979, 92182, 98091, 99635, 99902, 99941, 99975, 99987, 99991, 99998, 99998, 99998, 99998, 99998, 99999, 99999, 99999, 100000], [-96955, 41521, 84537, 89794, 96226, 97103, 97490, 99347, 99957, 99997, 100000], [-49247, 93963, 99006, 99428, 99964, 99992, 100000], [46062, 48599, 95745, 98620, 98677, 99516, 99802, 99973, 99993, 100000], [-3786, 59724, 62870, 80033, 90471, 98836, 99395, 99574, 99682, 99724, 99909, 99963, 99979, 99999, 100000], [-62512, -19463, 84187, 89388, 91368, 95524, 98987, 99085, 99230, 99809, 99978, 100000], [18183, 83019, 98718, 99570, 99777, 99980, 100000], [19925, 20448, 81509, 93698, 98451, 98776, 98915, 99007, 99925, 99994, 99996, 99999, 100000], [-96129, 93245, 95417, 98492, 99013, 99921, 99934, 99989, 99995, 100000], [-25468, 61948, 68372, 85478, 91239, 98906, 98988, 99653, 99915, 99957, 99998, 99999, 99999, 100000], [36648, 65266, 95679, 98905, 99868, 99977, 99983, 99983, 99995, 99995, 99996, 99997, 100000], [56006, 78969, 86785, 89834, 92494, 93887, 98268, 99771, 99982, 99998, 99999, 100000], [95387, 95790, 97307, 98168, 99868, 99995, 99995, 100000], [-69454, -17042, 8172, 50983, 63432, 72854, 73012, 80848, 83723, 85916, 91759, 99779, 99913, 99944, 99994, 99999, 99999], [65641, 95910, 97995, 98196, 98969, 99008, 99591, 99732, 99735, 99896, 99952, 99989, 99999, 100000], [57459, 95855, 97360, 98320, 99147, 99865, 99955, 99989, 99997, 99998, 100000], [-81589, -3474, 84141, 92981, 95255, 99192, 99962, 99970, 99994, 99998, 99999, 100000], [-23262, 92924, 95548, 96462, 99338, 99553, 99555, 99569, 99644, 99903, 99909, 99999, 99999, 100000], [-58466, 24432, 87898, 92795, 95701, 98143, 98163, 99182, 99351, 99746, 99811, 99943, 99955, 99978, 99997, 100000], [-97588, 7867, 10356, 20288, 67836, 69868, 73038, 77753, 81937, 88474, 89979, 92182, 98091, 99635, 99902, 99941, 99975, 99987, 99991, 99998, 99998, 99998, 99998, 99998, 99999, 99999, 99999, 100000], [-96955, 41521, 84537, 89794, 96226, 97103, 97490, 99347, 99957, 99997, 100000], [-49247, 93963, 99006, 99428, 99964, 99992, 100000], [46062, 48599, 95745, 98620, 98677, 99516, 99802, 99973, 99993, 100000], [-3786, 59724, 62870, 80033, 90471, 98836, 99395, 99574, 99682, 99724, 99909, 99963, 99979, 99999, 100000], [-62512, -19463, 84187, 89388, 91368, 95524, 98987, 99085, 99230, 99809, 99978, 100000], [18183, 83019, 98718, 99570, 99777, 99980, 100000], [19925, 20448, 81509, 93698, 98451, 98776, 98915, 99007, 99925, 99994, 99996, 99999, 100000], [-96129, 93245, 95417, 98492, 99013, 99921, 99934, 99989, 99995, 100000], [-25468, 61948, 68372, 85478, 91239, 98906, 98988, 99653, 99915, 99957, 99998, 99999, 99999, 100000], [36648, 65266, 95679, 98905, 99868, 99977, 99983, 99983, 99995, 99995, 99996, 99997, 100000], [56006, 78969, 86785, 89834, 92494, 93887, 98268, 99771, 99982, 99998, 99999, 100000], [95387, 95790, 97307, 98168, 99868, 99995, 99995, 100000], [-69454, -17042, 8172, 50983, 63432, 72854, 73012, 80848, 83723, 85916, 91759, 99779, 99913, 99944, 99994, 99999, 99999], [65641, 95910, 97995, 98196, 98969, 99008, 99591, 99732, 99735, 99896, 99952, 99989, 99999, 100000], [57459, 95855, 97360, 98320, 99147, 99865, 99955, 99989, 99997, 99998, 100000], [-81589, -3474, 84141, 92981, 95255, 99192, 99962, 99970, 99994, 99998, 99999, 100000], [-23262, 92924, 95548, 96462, 99338, 99553, 99555, 99569, 99644, 99903, 99909, 99999, 99999, 100000], [-58466, 24432, 87898, 92795, 95701, 98143, 98163, 99182, 99351, 99746, 99811, 99943, 99955, 99978, 99997, 100000], [-97588, 7867, 10356, 20288, 67836, 69868, 73038, 77753, 81937, 88474, 89979, 92182, 98091, 99635, 99902, 99941, 99975, 99987, 99991, 99998, 99998, 99998, 99998, 99998, 99999, 99999, 99999, 100000], [-96955, 41521, 84537, 89794, 96226, 97103, 97490, 99347, 99957, 99997, 100000], [-49247, 93963, 99006, 99428, 99964, 99992, 100000], [46062, 48599, 95745, 98620, 98677, 99516, 99802, 99973, 99993, 100000], [-3786, 59724, 62870, 80033, 90471, 98836, 99395, 99574, 99682, 99724, 99909, 99963, 99979, 99999, 100000], [-62512, -19463, 84187, 89388, 91368, 95524, 98987, 99085, 99230, 99809, 99978, 100000], [18183, 83019, 98718, 99570, 99777, 99980, 100000], [19925, 20448, 81509, 93698, 98451, 98776, 98915, 99007, 99925, 99994, 99996, 99999, 100000], [-96129, 93245, 95417, 98492, 99013, 99921, 99934, 99989, 99995, 100000], [-25468, 61948, 68372, 85478, 91239, 98906, 98988, 99653, 99915, 99957, 99998, 99999, 99999, 100000], [36648, 65266, 95679, 98905, 99868, 99977, 99983, 99983, 99995, 99995, 99996, 99997, 100000], [56006, 78969, 86785, 89834, 92494, 93887, 98268, 99771, 99982, 99998, 99999, 100000]];
        IList<IList<int>> nums = [[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]];
        var solution = new Solution();
        var result = solution.SmallestRange2(nums);

        Console.WriteLine($"[{string.Join(",", result)}]");
    }
    public int[] SmallestRange(IList<IList<int>> nums)
    {
        SortedList<int, HashSet<int>> dp = [];
        for (int i = 0; i < nums.Count; i++)
        {
            foreach (var num in nums[i])
            {
                dp[num] = [.. dp.GetValueOrDefault(num, []), i];
            }
        }
        int min = int.MaxValue;
        int start = 0;
        int end = 0;
        var keys = dp.Keys;

        for (int i = 0; i < keys.Count; i++)
        {
            HashSet<int> map = [];
            for (int j = i; j < keys.Count; j++)
            {
                map.UnionWith(dp[keys[j]]);
                if (map.Count == nums.Count)
                {
                    if (keys[j] - keys[i] < min)
                    {
                        min = keys[j] - keys[i];
                        start = keys[i];
                        end = keys[j];
                    }
                    if (min == 0) return [start, end];
                    continue;
                }
            }
        }

        return [start, end];
    }

    public int[] SmallestRange2(IList<IList<int>> nums)
    {
        PriorityQueue<(int value, int listId, int id), int> queue = new();
        for (int i = 0; i < nums.Count; i++)
        {
            queue.Enqueue((nums[i][0], i, 0), nums[i][0]);
        }

        int end = nums.Max(x => x[0]);
        int start = nums.Min(x => x[0]);
        int diff = end - start;
        int maxValue = end;

        while (true)
        {
            var (_, listId, id) = queue.Dequeue();

            if (id == nums[listId].Count - 1) break;

            int value = nums[listId][id + 1];
            queue.Enqueue((value, listId, id + 1), value);
            maxValue = Math.Max(maxValue, value);
            var (minValue, _, _) = queue.Peek();

            if (maxValue - minValue < diff)
            {
                diff = maxValue - minValue;
                end = maxValue;
                start = minValue;
            }
        }

        return [start, end];
    }
}